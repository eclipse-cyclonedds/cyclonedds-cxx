#
# Copyright(c) 2021 ZettaScale Technology and others
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v. 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
# v. 1.0 which is available at
# http://www.eclipse.org/org/documents/edl-v10.php.
#
# SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
#

#
# Template with basic build and test instructions to be included by pipelines.
#

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
    name: install_python
  # Set defaults from steps to share them among pipelines
  - bash: |
      [[ -n "${ARCH}" ]] || \
        echo "###vso[task.setvariable variable=arch;]x86_64"
      [[ -n "${BUILD_TYPE}" ]] || \
        echo "###vso[task.setvariable variable=build_type;]Debug"
    name: setup
  - bash: |
      echo "###vso[task.setvariable variable=pip_cache;]${HOME}/.cache/pip"
      echo "###vso[task.setvariable variable=conan_cache;]${HOME}/.conan/data"
      echo "###vso[task.setvariable variable=PATH;]$(python3 -m site --user-base)/bin:${PATH}"
      echo "###vso[task.setvariable variable=build_tool_options;]-j 4"
      sudo apt-get install -y clang clang-tools clang-tidy
    condition: eq(variables['Agent.OS'], 'Linux')
    name: setup_linux
  - bash: |
      echo "###vso[task.setvariable variable=pip_cache;]${HOME}/Library/Caches/pip"
      echo "###vso[task.setvariable variable=conan_cache;]${HOME}/.conan/data"
      echo "###vso[task.setvariable variable=PATH;]$(python3 -m site --user-base)/bin:${PATH}"
      echo "###vso[task.setvariable variable=build_tool_options;]-j 4"
      sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off
      brew install bison
    condition: eq(variables['Agent.OS'], 'Darwin')
    name: setup_macos
  # Use PowerShell rather than Bash to ensure Windows-style paths
  - pwsh: |
      $python_bin = python -m site --user-base
      Write-Host "###vso[task.setvariable variable=pip_cache;]${env:LOCALAPPDATA}\\pip\\Cache"
      Write-Host "###vso[task.setvariable variable=conan_cache;]${env:USERPROFILE}\\.conan\\data"
      Write-Host "###vso[task.setvariable variable=PATH;]$python_bin\\bin;${env:PATH}"
      # Visual Studio is most likely used on Windows agents
      if (${env:GENERATOR} -match "2019" -and -not ${env:PLATFORM}) {
        # Make sure platform matches arch if not specified
        if (${env:ARCH} -match "arm*") {
          Write-Host "###vso[task.setvariable variable=platform;]ARM"
        } elseif (${env:ARCH} -eq "x86") {
          Write-Host "###vso[task.setvariable variable=platform;]x86"
        } else {
          Write-Host "###vso[task.setvariable variable=platform;]x64"
        }
      }
      Write-Host "###vso[task.setvariable variable=build_tool_options;]-nologo -verbosity:minimal -maxcpucount:4 -p:CL_MPCount=4"
      choco install winflexbison3
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    name: setup_windows
  - task: Cache@2
    inputs:
      key: pip | 2 | $(Agent.OS)
      path: $(pip_cache)
    name: cache_pip
  - task: Cache@2
    inputs:
      key: conan | 2 | $(Agent.OS) | $(arch) | $(build_type)
      path: $(conan_cache)
    name: cache_conan
  - bash: |
      set -e -x
      pip install "conan==1.59.0" --user
      conan profile new default --detect
    name: install_conan
  - bash: |
      set -e -x
      conan profile update settings.compiler.libcxx=libstdc++11 default
    condition: eq(variables['Agent.OS'], 'Linux')
    name: update_conan_cxx_library
  - bash: |
      set -e -x
      sudo apt-get install libacl1-dev libncurses5-dev pkg-config
      git clone --depth 1 \
                --branch "${ICEORYX_BRANCH:-release_2.0}" \
                "${ICEORYX_REPOSITORY:-https://github.com/eclipse-iceoryx/iceoryx.git}" \
                iceoryx
      mkdir iceoryx/build
      cd iceoryx/build
      cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DCMAKE_BUILD_SHARED_LIBS=on \
            -DCMAKE_INSTALL_PREFIX=install \
            -DROUDI_ENVIRONMENT=on \
            ${GENERATOR:+-G} "${GENERATOR}" -A "${PLATFORM}" -T "${TOOLSET}" ../iceoryx_meta
      cmake --build . --config ${BUILD_TYPE} --target install -- ${BUILD_TOOL_OPTIONS}
    condition: eq(variables['iceoryx'], 'on')
    name: install_iceoryx
  - bash: |
      set -e -x
      git clone --single-branch \
                --branch "${CYCLONEDDS_BRANCH:-master}" \
                "${CYCLONEDDS_REPOSITORY:-https://github.com/eclipse-cyclonedds/cyclonedds.git}" \
                cyclonedds
      mkdir cyclonedds/build
      cd cyclonedds/build
      conan install -b missing -s arch=${ARCH} -s build_type=${BUILD_TYPE} ..
      cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DCMAKE_INSTALL_PREFIX=install \
            -DCMAKE_PREFIX_PATH="${BUILD_SOURCESDIRECTORY}/iceoryx/build/install" \
            -DSANITIZER=${SANITIZER:-none} \
            -DENABLE_SHM=${ICEORYX:-off} \
            -DENABLE_TYPE_DISCOVERY=${TYPE_DISCOVERY:-on} \
            -DENABLE_TOPIC_DISCOVERY=${TOPIC_DISCOVERY:-on} \
            ${GENERATOR:+-G} "${GENERATOR}" -A "${PLATFORM}" -T "${TOOLSET}" ..
      cmake --build . --config ${BUILD_TYPE} --target install -- ${BUILD_TOOL_OPTIONS}
    name: install_cyclonedds
  - bash: |
      set -e -x
      mkdir build
      cd build
      conan install -b missing -s arch=${ARCH} -s build_type=${BUILD_TYPE} ..
      cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DCMAKE_INSTALL_PREFIX=install \
            -DCMAKE_PREFIX_PATH="${BUILD_SOURCESDIRECTORY}/cyclonedds/build/install;${BUILD_SOURCESDIRECTORY}/iceoryx/build/install" \
            -DANALYZER=${ANALYZER:-off} \
            -DSANITIZER=${SANITIZER:-none} \
            -DENABLE_SHM=${ICEORYX:-off} \
            -DENABLE_COVERAGE=${COVERAGE:-off} \
            -DENABLE_LEGACY=${LEGACY:-off} \
            -DBUILD_TESTING=on \
            -DBUILD_EXAMPLES=${EXAMPLES:-on} \
            -DWERROR=on \
            ${GENERATOR:+-G} "${GENERATOR}" -A "${PLATFORM}" -T "${TOOLSET}" ..
      ${SCAN_BUILD} cmake --build . --config ${BUILD_TYPE} --target install -- ${BUILD_TOOL_OPTIONS}
    name: install_cyclonedds_cxx
  - bash: |
      set -e -x
      cd build
      ctest --output-on-failure -T test -C ${BUILD_TYPE}
    name: run_tests
