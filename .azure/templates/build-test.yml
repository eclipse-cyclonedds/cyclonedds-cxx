#
# Copyright(c) 2021 ZettaScale Technology and others
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v. 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Eclipse Distribution License
# v. 1.0 which is available at
# http://www.eclipse.org/org/documents/edl-v10.php.
#
# SPDX-License-Identifier: EPL-2.0 OR BSD-3-Clause
#

#
# Template with basic build and test instructions to be included by pipelines.
#

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
    name: install_python
  # Set defaults from steps to share them among pipelines
  - bash: |
      [[ -n "${ARCH}" ]] || \
        echo "###vso[task.setvariable variable=arch;]x86_64"
      [[ -n "${BUILD_TYPE}" ]] || \
        echo "###vso[task.setvariable variable=build_type;]Debug"
    name: setup
  - bash: |
      echo "###vso[task.setvariable variable=PATH;]$(python3 -m site --user-base)/bin:${PATH}"
      echo "###vso[task.setvariable variable=build_tool_options;]-j 4"
      sudo apt install -y clang clang-tools clang-tidy libboost-dev
    condition: eq(variables['Agent.OS'], 'Linux')
    name: setup_linux
  - bash: |
      echo "###vso[task.setvariable variable=PATH;]$(python3 -m site --user-base)/bin:${PATH}"
      echo "###vso[task.setvariable variable=build_tool_options;]-j 4"
      sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off
      brew install googletest
    condition: eq(variables['Agent.OS'], 'Darwin')
    name: setup_macos
  # Use PowerShell rather than Bash to ensure Windows-style paths
  - pwsh: |
      $python_bin = python -m site --user-base
      Write-Host "###vso[task.setvariable variable=PATH;]$python_bin\\bin;${env:PATH}"
      # Visual Studio is most likely used on Windows agents
      if (${env:GENERATOR} -match "2019" -and -not ${env:PLATFORM}) {
        # Make sure platform matches arch if not specified
        if (${env:ARCH} -match "arm*") {
          Write-Host "###vso[task.setvariable variable=platform;]ARM"
        } elseif (${env:ARCH} -eq "x86") {
          Write-Host "###vso[task.setvariable variable=platform;]x86"
        } else {
          Write-Host "###vso[task.setvariable variable=platform;]x64"
        }
      }
      Write-Host "###vso[task.setvariable variable=build_tool_options;]-nologo -verbosity:minimal -maxcpucount:4 -p:CL_MPCount=4"
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    name: setup_windows
  - pwsh: |
      # boost-msvc-14.1 for VS 2017
      # boost-msvc-14.2 for VS 2019
      # boost-msvc-14.3 for VS 2022
      choco install -y boost-msvc-14.2
    condition: and(eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['legacy'], 'on'))
    name: setup_windows_boost
  # Google Test doesn't seem to be available in Chocolatey
  # Google Test 1.12.1 is the latest one to support C++11 (only relevant if legacy=on)
  # and "apt install googletest" doesn't seem to do the trick on Linux
  - bash: |
      git clone --depth 1 --branch release-1.12.1 https://github.com/google/googletest.git
      mkdir googletest/build
      cd googletest/build
      cmake -DCMAKE_INSTALL_PREFIX=install -DBUILD_SHARED_LIBS=on \
        ${GENERATOR:+-G} "${GENERATOR}" -A "${PLATFORM}" -T "${TOOLSET}" ..
      cmake --build . --config ${BUILD_TYPE} --target install -- ${BUILD_TOOL_OPTIONS}
    condition: or(eq(variables['Agent.OS'], 'Linux'), eq(variables['Agent.OS'], 'Windows_NT'))
    name: setup_googletest
  - bash: |
      set -e -x
      sudo apt-get install libacl1-dev libncurses5-dev pkg-config
      git clone --depth 1 \
                --branch "${ICEORYX_BRANCH:-release_2.0}" \
                "${ICEORYX_REPOSITORY:-https://github.com/eclipse-iceoryx/iceoryx.git}" \
                iceoryx
      mkdir iceoryx/build
      cd iceoryx/build
      cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DCMAKE_INSTALL_PREFIX=install \
            -DBUILD_SHARED_LIBS=on \
            -DROUDI_ENVIRONMENT=on \
            ${GENERATOR:+-G} "${GENERATOR}" -A "${PLATFORM}" -T "${TOOLSET}" ../iceoryx_meta
      cmake --build . --config ${BUILD_TYPE} --target install -- ${BUILD_TOOL_OPTIONS}
    condition: eq(variables['iceoryx'], 'on')
    name: install_iceoryx
  - bash: |
      set -e -x
      git clone --single-branch \
                --branch "${CYCLONEDDS_BRANCH:-master}" \
                "${CYCLONEDDS_REPOSITORY:-https://github.com/eclipse-cyclonedds/cyclonedds.git}" \
                cyclonedds
      mkdir cyclonedds/build
      cd cyclonedds/build
      cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DCMAKE_INSTALL_PREFIX=install \
            -DCMAKE_PREFIX_PATH="${BUILD_SOURCESDIRECTORY}/iceoryx/build/install" \
            -DSANITIZER=${SANITIZER:-none} \
            -DENABLE_ICEORYX=${ICEORYX:-off} \
            -DENABLE_TYPELIB=${TYPELIB:-on} \
            -DENABLE_TOPIC_DISCOVERY=${TOPIC_DISCOVERY:-on} \
            ${GENERATOR:+-G} "${GENERATOR}" -A "${PLATFORM}" -T "${TOOLSET}" ..
      cmake --build . --config ${BUILD_TYPE} --target install -- ${BUILD_TOOL_OPTIONS}
    name: install_cyclonedds
  - bash: |
      set -e -x
      mkdir build
      cd build
      cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DCMAKE_INSTALL_PREFIX=install \
            -DCMAKE_PREFIX_PATH="${BUILD_SOURCESDIRECTORY}/cyclonedds/build/install;${BUILD_SOURCESDIRECTORY}/iceoryx/build/install;${BUILD_SOURCESDIRECTORY}/googletest/build/install" \
            -DCYCLONE_SOURCE_DIR="${BUILD_SOURCESDIRECTORY}/cyclonedds" \
            -DANALYZER=${ANALYZER:-off} \
            -DSANITIZER=${SANITIZER:-none} \
            -DENABLE_ICEORYX=${ICEORYX:-off} \
            -DENABLE_COVERAGE=${COVERAGE:-off} \
            -DENABLE_LEGACY=${LEGACY:-off} \
            -DBUILD_TESTING=on \
            -DBUILD_EXAMPLES=${EXAMPLES:-on} \
            -DWERROR=on \
            ${GENERATOR:+-G} "${GENERATOR}" -A "${PLATFORM}" -T "${TOOLSET}" ..
      ${SCAN_BUILD} cmake --build . --config ${BUILD_TYPE} --target install -- ${BUILD_TOOL_OPTIONS}
    name: install_cyclonedds_cxx
  - bash: |
      set -e -x
      cd build
      ctest --output-on-failure -T test -C ${BUILD_TYPE}
    name: run_tests
