language: cpp

# Coverity Scan can be configured through Travis addons, but this allows for
# more control over the build instructions and does not require the addition
# of a coverity_scan branch in the repository. travisci_build_coverity_scan.sh
# does more checks before it decides to download Coverity (around 500M), but
# these instructions assume Coverity Scan is not installed if the directory
# does not exist and expects the download to fail if the token is incorrect.
# Coverity Scan quota are not checked as the Coverity enabled build must only
# run from cron.
install_coverity: &install_coverity
  if [ "${COVERITY_SCAN}" = "true" ]; then
    COV_DIR="/tmp/coverity-scan-analysis";
    COV_ARC="/tmp/cov-analysis-${COV_PLATFORM}.tgz";
    test ! -d "${COV_DIR}" &&
      mkdir -p "${COV_DIR}" &&
      curl -s -S -F project="${TRAVIS_REPO_SLUG}"
                 -F token="${COVERITY_SCAN_TOKEN}"
                 -o "${COV_ARC}"
                 "https://scan.coverity.com/download/cxx/${COV_PLATFORM}" &&
      tar -xzf "${COV_ARC}" -C "${COV_DIR}";
    COV_ANALYSIS=$(find "${COV_DIR}" -type d -name "cov-analysis*");
    eval "export PATH=\"${PATH}:${COV_ANALYSIS}/bin\"";
    eval "export SCAN_BUILD=\"cov-build --dir cov-int\"";
    cov-configure --comptype ${COV_COMPTYPE} --compiler ${CC} --template;
  fi

submit_to_coverity_scan: &submit_to_coverity_scan
  if [ "${COVERITY_SCAN}" = "true" ]; then
    tar -czf analysis-results.tgz cov-int &&
    curl -s -S -F project="${TRAVIS_REPO_SLUG}"
               -F token="${COVERITY_SCAN_TOKEN}"
               -F file=@analysis-results.tgz
               -F version=$(git rev-parse --short HEAD)
               -F description="Travis CI build"
               -F email="${COVERITY_SCAN_EMAIL:=cyclonedds-inbox@eclipse.org}"
               "https://scan.coverity.com/builds";
  fi

# Coverity Scan does not support GCC 10 yet.
ubuntu1804_gcc7: &ubuntu1804_gcc7
  os: linux
  dist: bionic
  compiler: gcc
  addons:
    apt:
      update: true
  before_install:
    - eval "export CC=gcc CXX=g++"
    - eval "export COV_COMPTYPE=gcc COV_PLATFORM=linux64"
    - eval "export BUILD_TOOL_OPTIONS='-j 4'"
    - eval "export GENERATOR='Unix Makefiles'"
  install:
    - *install_coverity
    - pip install conan --upgrade --user

ubuntu1804_gcc10: &ubuntu1804_gcc10
  os: linux
  dist: bionic
  compiler: gcc
  addons:
    apt:
      update: true
      sources:
        - sourceline: 'ppa:ubuntu-toolchain-r/test'
      packages: [ gcc-10 g++-10 ]
  before_install:
    - eval "export CC=gcc-10 CXX=g++-10"
    - eval "export COV_COMPTYPE=gcc COV_PLATFORM=linux64"
    - eval "export BUILD_TOOL_OPTIONS='-j 4'"
    - eval "export GENERATOR='Unix Makefiles'"
  install:
    - pip install conan --upgrade --user

ubuntu1804_clang10: &ubuntu1804_clang10
  os: linux
  dist: bionic
  compiler: clang
  addons:
    apt:
      update: true
      sources:
        - sourceline: 'deb https://apt.llvm.org/bionic llvm-toolchain-bionic-10 main'
          key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
      packages: [ clang-10 clang++-10 ]
  before_install:
    - eval "export CC=clang-10 CXX=clang++-10"
    - eval "export COV_COMPTYPE=clang COV_PLATFORM=linux64"
    - eval "export BUILD_TOOL_OPTIONS='-j 4'"
    - eval "export GENERATOR='Unix Makefiles'"
  install:
    - pip install conan --upgrade --user

macos1015_xcode11_6: &macos1015_xcode11_6
  os: osx
  osx_image: xcode11.6
  compiler: clang
  addons:
    homebrew:
      packages: [ pyenv-virtualenv, bison ]
  before_install:
    - eval "export CC=clang CXX=clang++"
    - eval "export COV_COMPTYPE=clang COV_PLATFORM=macOSX"
    - eval "export BUILD_TOOL_OPTIONS='-j 4'"
    - eval "export GENERATOR='Unix Makefiles'"
    - eval "export PATH=\"${PATH}:$(python3 -m site --user-base)/bin\""
    - eval "export PATH=\"/usr/local/opt/bison/bin:${PATH}\""
  install:
    - python3 -m pip install conan --upgrade --user

windows1809_vs2017: &windows1809_vs2017
  os: windows
  # Microsoft Windows instances freeze at "install:" if secure environment
  # variables are used. There is no option to export secrets only for
  # specified platforms. The "filter_secrets: false" option is used to disable
  # the filter for Microsoft Windows instances. This is not an issue if the
  # secret is removed from the environment at the earliest opportunity, before
  # risk of exposure, as secrets are always removed from the environment for
  # pull requests and are still filtered when exported to the environment. The
  # secret of course will not be available for Microsoft Windows builds, but
  # for Coverity Scan, that is fine.
  filter_secrets: false
  before_install:
    - eval "unset COVERITY_SCAN_TOKEN"
    # Conan will automatically determine the best compiler for a given platform
    # based on educated guesses. The first check is based on the CC and CXX
    # environment variables, the second (on Windows) is to check if Microsoft
    # Visual Studio is installed. On Travis CC and CXX are set to gcc on
    # Microsoft Windows targets as well, this has the undesired effect that
    # MSVC is not detected, unsetting CC and CXX solves that problem.
    - eval "unset CC CXX"
    - eval "export COV_COMPTYPE=msvc COV_PLATFORM=win64"
    - eval "export BUILD_TOOL_OPTIONS='-nologo -verbosity:minimal -maxcpucount -p:CL_MPCount=2'"
    - |
      if [ "${ARCH}" = "x86_64" ]; then
        eval "export GENERATOR='Visual Studio 15 2017 Win64'"
      else
        eval "export GENERATOR='Visual Studio 15 2017'"
      fi
    - JAVA_HOME=$(find "/c/Program Files/Android/jdk/" -name "*openjdk*" | sort | head -n 1)
    - export JAVA_HOME
    - export PATH="${PATH}:${JAVA_HOME}/bin"
  install:
    # Windows targets in Travis are still very much in beta and Python is not
    # yet available and installation of Python through Chocolaty does not work
    # well. The real fix is to wait until Python and pip are both available on
    # the target. Until then download Conan from the official website and
    # simply add the extracted folder to the path.
    - choco install innoextract
    - choco install maven --ignore-dependencies
    - wget -q https://dl.bintray.com/conan/installers/conan-win-64_1_10_0.exe
    - innoextract conan-win-64_1_10_0.exe
    - eval "export PATH=\"$(pwd)/app/conan:${PATH}\""

jobs:
  include:
    - <<: *ubuntu1804_gcc7
      env: [ ARCH=x86_64, BUILD_TYPE=Debug, COVERITY_SCAN=true ]
      if: type = cron
    - <<: *ubuntu1804_gcc10
      env: [ ARCH=x86_64, BUILD_TYPE=Debug ]
    - <<: *ubuntu1804_gcc10
      env: [ ARCH=x86_64, BUILD_TYPE=Release ]
    - <<: *ubuntu1804_clang10
      env: [ ARCH=x86_64, BUILD_TYPE=Debug, SANITIZER=address ]
    - <<: *ubuntu1804_clang10
      env: [ ARCH=x86_64, BUILD_TYPE=Release ]
    - <<: *macos1015_xcode11_6
      env: [ ARCH=x86_64, BUILD_TYPE=Debug, SANITIZER=address ]
    - <<: *macos1015_xcode11_6
      env: [ ARCH=x86_64, BUILD_TYPE=Release ]
    - <<: *windows1809_vs2017
      env: [ ARCH=x86, BUILD_TYPE=Debug ]
    - <<: *windows1809_vs2017
      env: [ ARCH=x86_64, BUILD_TYPE=Debug ]
    - <<: *windows1809_vs2017
      env: [ ARCH=x86_64, BUILD_TYPE=Release ]

before_script:
  - conan profile new default --detect
  - conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan

build_cyclonedds: &build_cyclonedds
  - eval "export CYCLONEDDS_BRANCH=idlcxx"
  - eval "export CYCLONEDDS_REPOSITORY=https://github.com/eclipse-cyclonedds/cyclonedds.git"
  - git clone --single-branch --branch ${CYCLONEDDS_BRANCH} ${CYCLONEDDS_REPOSITORY} cyclonedds
  - mkdir cyclonedds/build
  - cd cyclonedds/build
  - conan install -b missing -s arch=${ARCH} -s build_type=${BUILD_TYPE} ..
  - cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
          -DCMAKE_INSTALL_PREFIX=$(pwd)/install
          -DUSE_SANITIZER=${SANITIZER}
          -DWERROR=on
          -G "${GENERATOR}" ..
  - cmake --build . --config ${BUILD_TYPE} --target install -- ${BUILD_TOOL_OPTIONS}
  - cd ../..

script:
  - *build_cyclonedds
  - mkdir build
  - cd build
  - conan install -b missing -s arch=${ARCH} -s build_type=${BUILD_TYPE} ../${CONANFILE:-conanfile.txt}
  - ${SCAN_BUILD} cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
          -DCMAKE_INSTALL_PREFIX=$(pwd)/install
          -DCMAKE_PREFIX_PATH=${TRAVIS_BUILD_DIR}/cyclonedds/build/install
          -DUSE_SANITIZER=${SANITIZER}
          -DBUILD_TESTING=on
          -G "${GENERATOR}" ..
  - cmake --build . --config ${BUILD_TYPE} --target install -- ${BUILD_TOOL_OPTIONS}
  - ctest -j 4 --output-on-failure -T test -C ${BUILD_TYPE}

after_success:
  - *submit_to_coverity_scan
