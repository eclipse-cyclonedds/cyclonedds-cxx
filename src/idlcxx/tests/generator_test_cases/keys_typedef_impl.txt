#include "org/eclipse/cyclonedds/topic/hash.hpp"

size_t typedef_write_td_1(const td_1 &obj, void* data, size_t position)
{
  size_t _al0 = (4 - (position&0x3))&0x3;  //alignment
  memset(static_cast<char*>(data)+position,0x0,_al0);  //setting alignment bytes to 0x0
  position += _al0;  //moving position indicator
  uint32_t _se0 = static_cast<uint32_t>(obj.size());  //number of entries in the sequence
  *reinterpret_cast<uint32_t*>(static_cast<char*>(data) + position) = _se0;  //writing entries for member: obj
  position += 4;  //moving position indicator
  if (0 < obj.size()) memcpy(static_cast<char*>(data)+position,obj.data(),_se0*4); //writing bytes for member: obj
  position += _se0*4;  //entries of sequence
  return position;
}

size_t s::write_struct(void *data, size_t position) const
{
  *reinterpret_cast<uint8_t*>(static_cast<char*>(data)+position) = o();  //writing bytes for member: o()
  position += 1;  //moving position indicator
  position = typedef_write_td_1(t(), data, position);
  return position;
}

size_t typedef_write_size_td_1(const td_1 &obj, size_t position)
{
  position += (4 - (position&0x3))&0x3;  //alignment
  uint32_t _se0 = static_cast<uint32_t>(obj.size());  //number of entries in the sequence
  position += 4;  //bytes for sequence entries
  position += _se0*4;  //entries of sequence
  return position;
}

size_t s::write_size(size_t position) const
{
  position += 1;  //bytes for member: o()
  position = typedef_write_size_td_1(t(), position);
  return position;
}

size_t typedef_max_size_td_1(const td_1 &obj, size_t position)
{
  (void)obj;
  (void)position;
  return UINT_MAX;
}

size_t s::max_size(size_t position) const
{
  if (position != UINT_MAX)   position += 1;  //bytes for member: o()
  position = typedef_max_size_td_1(t(), position);
  return position;
}

size_t typedef_key_size_td_1(const td_1 &obj, size_t position)
{
  position += (4 - (position&0x3))&0x3;  //alignment
  uint32_t _se0 = static_cast<uint32_t>(obj.size());  //number of entries in the sequence
  position += 4;  //bytes for sequence entries
  position += _se0*4;  //entries of sequence
  return position;
}

size_t s::key_size(size_t position) const
{
  position = typedef_key_size_td_1(t(), position);
  return position;
}

size_t typedef_key_max_size_td_1(const td_1 &obj, size_t position)
{
  (void)obj;
  (void)position;
  return UINT_MAX;
}

size_t s::key_max_size(size_t position) const
{
  position = typedef_key_max_size_td_1(t(), position);
  return position;
}

size_t typedef_key_write_td_1(const td_1 &obj, void *data, size_t position)
{
  size_t _al0 = (4 - (position&0x3))&0x3;  //alignment
  memset(static_cast<char*>(data)+position,0x0,_al0);  //setting alignment bytes to 0x0
  position += _al0;  //moving position indicator
  uint32_t _se0 = static_cast<uint32_t>(obj.size());  //number of entries in the sequence
  *reinterpret_cast<uint32_t*>(static_cast<char*>(data) + position) = _se0;  //writing entries for member: obj
  position += 4;  //moving position indicator
  if (0 < obj.size()) memcpy(static_cast<char*>(data)+position,obj.data(),_se0*4); //writing bytes for member: obj
  position += _se0*4;  //entries of sequence
  return position;
}

size_t s::key_write(void *data, size_t position) const
{
  (void)data;
  position = typedef_key_write_td_1(t(), data, position);
  return position;
}

bool s::key(ddsi_keyhash_t &hash) const
{
  size_t sz = key_size(0);
  size_t padding = 16 - sz%16;
  if (sz != 0 && padding == 16) padding = 0;
  std::vector<unsigned char> buffer(sz+padding);
  memset(buffer.data()+sz,0x0,padding);
  key_write(buffer.data(),0);
  static bool (*fptr)(const std::vector<unsigned char>&, ddsi_keyhash_t &) = NULL;
  if (fptr == NULL)
  {
    if (key_max_size(0) <= 16)
    {
      //bind to unmodified function which just copies buffer into the keyhash
      fptr = &org::eclipse::cyclonedds::topic::simple_key;
    }
    else
    {
      //bind to MD5 hash function
      fptr = &org::eclipse::cyclonedds::topic::complex_key;
    }
  }
  return (*fptr)(buffer,hash);
}

size_t typedef_key_read_td_1(td_1 &obj, const void *data, size_t position)
{
  position += (4 - (position&0x3))&0x3;  //alignment
  uint32_t _se0 = *reinterpret_cast<const uint32_t*>(static_cast<const char*>(data)+position);  //number of entries in the sequence
  position += 4;  //moving position indicator
  obj.assign(reinterpret_cast<const int32_t*>(static_cast<const char*>(data)+position),reinterpret_cast<const int32_t*>(static_cast<const char*>(data)+position)+_se0); //reading bytes for member: obj
  position += _se0*4;  //entries of sequence
  return position;
}

size_t s::key_read(const void *data, size_t position)
{
  (void)data;
  position = typedef_key_read_td_1(t(), data, position);
  return position;
}

size_t typedef_read_td_1(td_1 &obj, const void* data, size_t position)
{
  position += (4 - (position&0x3))&0x3;  //alignment
  uint32_t _se0 = *reinterpret_cast<const uint32_t*>(static_cast<const char*>(data)+position);  //number of entries in the sequence
  position += 4;  //moving position indicator
  obj.assign(reinterpret_cast<const int32_t*>(static_cast<const char*>(data)+position),reinterpret_cast<const int32_t*>(static_cast<const char*>(data)+position)+_se0); //reading bytes for member: obj
  position += _se0*4;  //entries of sequence
  return position;
}

size_t s::read_struct(const void *data, size_t position)
{
  o() = *reinterpret_cast<const uint8_t*>(static_cast<const char*>(data)+position);  //reading bytes for member: o()
  position += 1;  //moving position indicator
  position = typedef_read_td_1(t(), data, position);
  return position;
}

