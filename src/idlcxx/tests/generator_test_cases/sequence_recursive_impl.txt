#include "org/eclipse/cyclonedds/topic/hash.hpp"

size_t typedef_write_recseq(const recseq &obj, void* data, size_t position)
{
  size_t _al0 = (4 - (position&0x3))&0x3;  //alignment
  memset(static_cast<char*>(data)+position,0x0,_al0);  //setting alignment bytes to 0x0
  position += _al0;  //moving position indicator
  uint32_t _se0 = static_cast<uint32_t>(obj.size());  //number of entries in the sequence
  *reinterpret_cast<uint32_t*>(static_cast<char*>(data) + position) = _se0;  //writing entries for member: obj
  position += 4;  //moving position indicator
  for (size_t _i1 = 0; _i1 < _se0; _i1++) {
    uint32_t _se1 = static_cast<uint32_t>(obj[_i1].size());  //number of entries in the sequence
    *reinterpret_cast<uint32_t*>(static_cast<char*>(data) + position) = _se1;  //writing entries for member: obj[_i1]
    position += 4;  //moving position indicator
    for (size_t _i2 = 0; _i2 < _se1; _i2++) {
      uint32_t _se2 = static_cast<uint32_t>(obj[_i1][_i2].size());  //number of entries in the sequence
      *reinterpret_cast<uint32_t*>(static_cast<char*>(data) + position) = _se2;  //writing entries for member: obj[_i1][_i2]
      position += 4;  //moving position indicator
      for (size_t _i3 = 0; _i3 < _se2; _i3++) {
        uint32_t _se3 = static_cast<uint32_t>(obj[_i1][_i2][_i3].size()+1);  //number of entries in the sequence
        *reinterpret_cast<uint32_t*>(static_cast<char*>(data) + position) = _se3;  //writing entries for member: obj[_i1][_i2][_i3]
        position += 4;  //moving position indicator
        memcpy(static_cast<char*>(data)+position,obj[_i1][_i2][_i3].data(),_se3*1); //writing bytes for member: obj[_i1][_i2][_i3]
        position += _se3;  //entries of sequence
      }
    }
  }
  return position;
}

size_t typedef_write_size_recseq(const recseq &obj, size_t position)
{
  position += (4 - (position&0x3))&0x3;  //alignment
  uint32_t _se0 = static_cast<uint32_t>(obj.size());  //number of entries in the sequence
  position += 4;  //bytes for sequence entries
  for (size_t _i1 = 0; _i1 < _se0; _i1++) {
    uint32_t _se1 = static_cast<uint32_t>(obj[_i1].size());  //number of entries in the sequence
    position += 4;  //bytes for sequence entries
    for (size_t _i2 = 0; _i2 < _se1; _i2++) {
      uint32_t _se2 = static_cast<uint32_t>(obj[_i1][_i2].size());  //number of entries in the sequence
      position += 4;  //bytes for sequence entries
      for (size_t _i3 = 0; _i3 < _se2; _i3++) {
        uint32_t _se3 = static_cast<uint32_t>(obj[_i1][_i2][_i3].size()+1);  //number of entries in the sequence
        position += 4;  //bytes for sequence entries
        position += _se3;  //entries of sequence
      }
    }
  }
  return position;
}

size_t typedef_max_size_recseq(const recseq &obj, size_t position)
{
  (void)obj;
  (void)position;
  return UINT_MAX;
}

size_t typedef_key_size_recseq(const recseq &obj, size_t position)
{
  position += (4 - (position&0x3))&0x3;  //alignment
  uint32_t _se0 = static_cast<uint32_t>(obj.size());  //number of entries in the sequence
  position += 4;  //bytes for sequence entries
  for (size_t _i1 = 0; _i1 < _se0; _i1++) {
    uint32_t _se1 = static_cast<uint32_t>(obj[_i1].size());  //number of entries in the sequence
    position += 4;  //bytes for sequence entries
    for (size_t _i2 = 0; _i2 < _se1; _i2++) {
      uint32_t _se2 = static_cast<uint32_t>(obj[_i1][_i2].size());  //number of entries in the sequence
      position += 4;  //bytes for sequence entries
      for (size_t _i3 = 0; _i3 < _se2; _i3++) {
        uint32_t _se3 = static_cast<uint32_t>(obj[_i1][_i2][_i3].size()+1);  //number of entries in the sequence
        position += 4;  //bytes for sequence entries
        position += _se3;  //entries of sequence
      }
    }
  }
  return position;
}

size_t typedef_key_max_size_recseq(const recseq &obj, size_t position)
{
  (void)obj;
  (void)position;
  return UINT_MAX;
}

size_t typedef_key_write_recseq(const recseq &obj, void *data, size_t position)
{
  size_t _al0 = (4 - (position&0x3))&0x3;  //alignment
  memset(static_cast<char*>(data)+position,0x0,_al0);  //setting alignment bytes to 0x0
  position += _al0;  //moving position indicator
  uint32_t _se0 = static_cast<uint32_t>(obj.size());  //number of entries in the sequence
  *reinterpret_cast<uint32_t*>(static_cast<char*>(data) + position) = _se0;  //writing entries for member: obj
  position += 4;  //moving position indicator
  for (size_t _i1 = 0; _i1 < _se0; _i1++) {
    uint32_t _se1 = static_cast<uint32_t>(obj[_i1].size());  //number of entries in the sequence
    *reinterpret_cast<uint32_t*>(static_cast<char*>(data) + position) = _se1;  //writing entries for member: obj[_i1]
    position += 4;  //moving position indicator
    for (size_t _i2 = 0; _i2 < _se1; _i2++) {
      uint32_t _se2 = static_cast<uint32_t>(obj[_i1][_i2].size());  //number of entries in the sequence
      *reinterpret_cast<uint32_t*>(static_cast<char*>(data) + position) = _se2;  //writing entries for member: obj[_i1][_i2]
      position += 4;  //moving position indicator
      for (size_t _i3 = 0; _i3 < _se2; _i3++) {
        uint32_t _se3 = static_cast<uint32_t>(obj[_i1][_i2][_i3].size()+1);  //number of entries in the sequence
        *reinterpret_cast<uint32_t*>(static_cast<char*>(data) + position) = _se3;  //writing entries for member: obj[_i1][_i2][_i3]
        position += 4;  //moving position indicator
        memcpy(static_cast<char*>(data)+position,obj[_i1][_i2][_i3].data(),_se3*1); //writing bytes for member: obj[_i1][_i2][_i3]
        position += _se3;  //entries of sequence
      }
    }
  }
  return position;
}

size_t typedef_key_read_recseq(recseq &obj, const void *data, size_t position)
{
  position += (4 - (position&0x3))&0x3;  //alignment
  uint32_t _se0 = *reinterpret_cast<const uint32_t*>(static_cast<const char*>(data)+position);  //number of entries in the sequence
  position += 4;  //moving position indicator
  obj.resize(_se0);
  for (size_t _i1 = 0; _i1 < _se0; _i1++) {
    uint32_t _se1 = *reinterpret_cast<const uint32_t*>(static_cast<const char*>(data)+position);  //number of entries in the sequence
    position += 4;  //moving position indicator
    obj[_i1].resize(_se1);
    for (size_t _i2 = 0; _i2 < _se1; _i2++) {
      uint32_t _se2 = *reinterpret_cast<const uint32_t*>(static_cast<const char*>(data)+position);  //number of entries in the sequence
      position += 4;  //moving position indicator
      obj[_i1][_i2].resize(_se2);
      for (size_t _i3 = 0; _i3 < _se2; _i3++) {
        uint32_t _se3 = *reinterpret_cast<const uint32_t*>(static_cast<const char*>(data)+position);  //number of entries in the sequence
        position += 4;  //moving position indicator
        obj[_i1][_i2][_i3].assign(reinterpret_cast<const char*>(static_cast<const char*>(data)+position),reinterpret_cast<const char*>(static_cast<const char*>(data)+position)+_se3); //reading bytes for member: obj[_i1][_i2][_i3]
        position += _se3;  //entries of sequence
      }
    }
  }
  return position;
}

size_t typedef_read_recseq(recseq &obj, const void* data, size_t position)
{
  position += (4 - (position&0x3))&0x3;  //alignment
  uint32_t _se0 = *reinterpret_cast<const uint32_t*>(static_cast<const char*>(data)+position);  //number of entries in the sequence
  position += 4;  //moving position indicator
  obj.resize(_se0);
  for (size_t _i1 = 0; _i1 < _se0; _i1++) {
    uint32_t _se1 = *reinterpret_cast<const uint32_t*>(static_cast<const char*>(data)+position);  //number of entries in the sequence
    position += 4;  //moving position indicator
    obj[_i1].resize(_se1);
    for (size_t _i2 = 0; _i2 < _se1; _i2++) {
      uint32_t _se2 = *reinterpret_cast<const uint32_t*>(static_cast<const char*>(data)+position);  //number of entries in the sequence
      position += 4;  //moving position indicator
      obj[_i1][_i2].resize(_se2);
      for (size_t _i3 = 0; _i3 < _se2; _i3++) {
        uint32_t _se3 = *reinterpret_cast<const uint32_t*>(static_cast<const char*>(data)+position);  //number of entries in the sequence
        position += 4;  //moving position indicator
        obj[_i1][_i2][_i3].assign(reinterpret_cast<const char*>(static_cast<const char*>(data)+position),reinterpret_cast<const char*>(static_cast<const char*>(data)+position)+_se3); //reading bytes for member: obj[_i1][_i2][_i3]
        position += _se3;  //entries of sequence
      }
    }
  }
  return position;
}

